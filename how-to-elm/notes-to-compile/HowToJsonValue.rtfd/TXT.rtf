{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Monaco;\f2\fswiss\fcharset0 Helvetica-Bold;
}
{\colortbl;\red255\green255\blue255;\red22\green21\blue22;\red29\green136\blue198;\red176\green0\blue52;
\red22\green21\blue22;\red22\green21\blue22;\red255\green255\blue255;\red78\green77\blue78;\red18\green79\blue146;
\red115\green115\blue115;\red221\green246\blue255;\red246\green246\blue246;}
{\*\expandedcolortbl;;\cssrgb\c11373\c10980\c11373;\cssrgb\c11373\c60784\c81961\c10196;\cssrgb\c75294\c7451\c26275;
\cssrgb\c11373\c10980\c11373\c3922;\cssrgb\c11373\c10980\c11373\c12941;\cssrgb\c100000\c100000\c100000;\cssrgb\c38039\c37647\c38039;\cssrgb\c7059\c39216\c63922;
\cssrgb\c52549\c52549\c52549;\cssrgb\c89020\c97255\c100000;\cssrgb\c97255\c97255\c97255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Is there a way to partially decode a http request, then partially encode it? For example, I only want to update\'a0a single key and leave the rest as is, but the API only allows a\'a0
\f1\fs24 \cf4 \cb5 \strokec4 PUT
\f0\fs30 \cf2 \cb3 \strokec2 \'a0(not a patch). So\'a0I\'92d\'a0have to send the full json back to the server.\cb1 \
\
\cb3 It\'92d\'a0be nice to only build a form for the bit I need to change, but not sure if this is possible in Elm.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb6 \

\f2\b \cb1 \
\cb7 lue\cb1 \

\f0\b0 \cb7 \'a0\'a0{\field{\*\fldinst{HYPERLINK "https://elmlang.slack.com/archives/C0K8VHA6B/p1746992087450549?thread_ts=1746991783.290109&cid=C0K8VHA6B"}}{\fldrslt 
\fs24 \cf8 \strokec8 Yesterday at 8:34 PM}}\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb7 not a complete solution but you can decode fields, elements etc you don't care about with\'a0
\f1\fs24 \cf4 \cb5 \strokec4 Json.Decode.value
\f0\fs30 \cf2 \cb7 \strokec2 \'a0and encode them again as is (since it's already of type Json.Encode.Value) without worrying about their exact shape.\cb1 \
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf9 \cb7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		{\field{\*\fldinst{HYPERLINK "https://dark.elm.dmy.fr/packages/elm/json/latest/Json-Decode#value"}}{\fldrslt \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 https://dark.elm.dmy.fr/packages/elm/json/latest/Json-Decode#value}}\cf2 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb7 E.g.\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\fs24 \cf2 \cb5 Json.Decode.map2 (\\specific whatever -> \{ specific = specific, whatever = whatever \})\
    (Json.Decode.field "specific" specificDecoder)\
    (Json.Decode.field "complexFieldIDoNotCareAbout" Json.Decode.value)\
-- and\
\\record ->\
    Json.Encode.record\
        [ ( "specific", specificJsonEncode record.specific )\
        , ( "complexFieldIDoNotCareAbout", record.whatever )\
        ]\cb1 \

\f0\fs26 \cf10 \cb7 \strokec10 (edited)
\fs30 \cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb6 \

\f2\b \cb1 \
\cb7 mbaumann\cb1 \

\f0\b0 \cb7 \'a0\'a0{\field{\*\fldinst{HYPERLINK "https://elmlang.slack.com/archives/C0K8VHA6B/p1746992216635839?thread_ts=1746991783.290109&cid=C0K8VHA6B"}}{\fldrslt 
\fs24 \cf8 \strokec8 Yesterday at 8:36 PM}}\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb7 not sure, if it applies, but could this package help?\'a0{\field{\*\fldinst{HYPERLINK "https://package.elm-lang.org/packages/1602/json-value/latest/"}}{\fldrslt \cf9 \strokec9 https://package.elm-lang.org/packages/1602/json-value/latest/}}\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\b\fs24 \cf9 \strokec9 {{\NeXTGraphic 1f44d@2x.png \width640 \height640 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\cb11 2\cb1 \

\f0\b0\fs36 \cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\f2\b\fs30 \cf2 \
\cb7 Rob\cb1 \

\f0\b0 \cb7 \'a0\'a0{\field{\*\fldinst{HYPERLINK "https://elmlang.slack.com/archives/C0K8VHA6B/p1746993593884349?thread_ts=1746991783.290109&cid=C0K8VHA6B"}}{\fldrslt 
\fs24 \cf8 \strokec8 Yesterday at 8:59 PM}}\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb7 Nice one. So\'a0
\f1\fs24 \cf4 \cb5 \strokec4 Json.Decode.value
\f0\fs30 \cf2 \cb7 \strokec2 \'a0is basically a string?\'a0I\'92ll\'a0check out that package too. Yeah\'a0I\'92m\'a0in a situation where\'a0I\'92m\'a0using one file per user, with different pages. Thanks both!\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb6 \

\f2\b \cb1 \
\cb7 Simon Lydell\cb1 \

\f0\b0 \cb7 \'a0\'a0{\field{\*\fldinst{HYPERLINK "https://elmlang.slack.com/archives/C0K8VHA6B/p1746996321734969?thread_ts=1746991783.290109&cid=C0K8VHA6B"}}{\fldrslt 
\fs24 \cf8 \strokec8 Yesterday at 9:45 PM}}\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\fs24 \cf4 \cb5 \strokec4 Json.Decode.Value
\f0\fs30 \cf2 \cb7 \strokec2 \'a0is any JS value: It can be a number, a string, a boolean, null, undefined, an array, some kind of object, a function, etc.\'a0
\f1\fs24 \cf4 \cb5 \strokec4 Json.Decode.value
\f0\fs30 \cf2 \cb7 \strokec2 \'a0is a decoder for\'a0
\f1\fs24 \cf4 \cb5 \strokec4 Json.Decode.value
\f0\fs30 \cf2 \cb7 \strokec2 \'a0(which is basically a no-op decoder)
\fs26 \cf10 \strokec10 \'a0(edited)\'a0
\fs30 \cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb6 \

\f2\b \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb12 Rob\cb1 \

\f0\b0 \cb12 \'a0\'a0{\field{\*\fldinst{HYPERLINK "https://elmlang.slack.com/archives/C0K8VHA6B/p1746996949090189?thread_ts=1746991783.290109&cid=C0K8VHA6B"}}{\fldrslt 
\fs24 \cf8 \strokec8 Yesterday at 9:55 PM}}\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 {{\NeXTGraphic 1f926-200d-2642-fe0f@2x.png \width880 \height880 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb12 \'a0So it\'92s basically the representation of the js/json data structure, without a \'93proper\'94 decoder. It seems only useful for passing through ports or re-encoding to json? Or\'a0
\f1\fs24 \cf4 \cb5 \strokec4 decodeValue
\f0\fs30 \cf2 \cb12 \strokec2 \'a0function.\cb1 \
}